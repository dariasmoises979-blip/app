permissions:
  actions: read
  contents: write
  pull-requests: write
  security-events: write

name: Run Qa Tests

on:
  pull_request:
    branches:
      - qa          # se ejecuta cuando hay PR hacia qa
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  test:
    name: Run Qa Tests
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/qa.yml@main
    #with:
    #  sonar-token: ${{ secrets.SONAR_TOKEN }}
    #  branch: "qa"
###############
  
  # Workflow: Crea automÃ¡ticamente un Pull Request desde QA hacia Integration
  # cuando el merge a dev fue exitoso y las pruebas pasaron correctamente.

  # Job 2: Crear Pull Request usando la API de GitHub
  create-pr:
    name: Create PR QA to Integration
    needs: test
    runs-on: ubuntu-latest
    if: success()

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Create Pull Request via API
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Verificar si ya existe un PR abierto de qa a integration
            const { data: existingPRs } = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:qa`,
              base: 'integration',
              state: 'open'
            });

            if (existingPRs.length > 0) {
              console.log(`âœ… PR already exists: #${existingPRs[0].number}`);
              console.log(`URL: ${existingPRs[0].html_url}`);
              
              // Actualizar el PR existente con un comentario
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existingPRs[0].number,
                body: `ðŸ”„ QA branch updated. Tests passed successfully.\n\n**Workflow run:** https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
              });
              
              return;
            }

            // Crear nuevo PR
            const { data: pr } = await github.rest.pulls.create({
              owner,
              repo,
              title: 'ðŸš€ Deploy QA to Integration',
              head: 'qa',
              base: 'integration',
              body: `## Automatic deployment from qa to integration
              
            This PR contains the latest changes from \`qa\` branch ready for Integration environment.

            ### ðŸ“‹ Pre-merge Checklist
            - [ ] Code has been reviewed
            - [ ] All tests are passing âœ…
            - [ ] Ready for Integration environment

            ### ðŸ”— Links
            - **Workflow run:** https://github.com/${owner}/${repo}/actions/runs/${context.runId}
            - **Commit:** ${context.sha}

            ---
            *Auto-generated by GitHub Actions on ${new Date().toISOString()}*`,
                        draft: false
                      });

                      // AÃ±adir labels al PR
                      await github.rest.issues.addLabels({
                        owner,
                        repo,
                        issue_number: pr.number,
                        labels: ['automated', 'deployment', 'integration']
                      });

                      console.log(`âœ… Pull Request created: #${pr.number}`);
                      console.log(`URL: ${pr.html_url}`);

                      // Opcional: Asignar revisores automÃ¡ticamente
                      // await github.rest.pulls.requestReviewers({
                      //   owner,
                      //   repo,
                      //   pull_number: pr.number,
                      //   reviewers: ['tu-usuario']
                      // });