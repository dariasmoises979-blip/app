permissions:
  actions: read
  contents: write
  pull-requests: write
  security-events: write

name: Run Qa Tests

on:
  push:
    branches:
      - qa      
  # ───────────────────────────────────────────────────────────
  # Job 1: Ejecutar tests 
  # ───────────────────────────────────────────────────────────
jobs:
  test:
    name: Run Qa Tests
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/qa.yml@main
    with:
      branch: "qa"
      projectBaseDir: "./pipeline-build"
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_app
        -Dsonar.projectName=app
        -Dsonar.python.version=3.10
        -Dsonar.sources=system_info_app
        -Dsonar.tests=system_info_app/test
        -Dsonar.test.inclusions=**/test/**,**/tests/**
        -Dsonar.coverage.exclusions=**/test/**,**/tests/**
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
      
  
  # ───────────────────────────────────────────────────────────
  # Job 2: Crear PR a Integration
  # ───────────────────────────────────────────────────────────
  create-pr-to-integration:
    name: Create PR to Integration
    needs: test  # ⚙️ Solo se ejecuta si los tests pasan
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/pull-request.yml@main  # 📂 Ruta al workflow reusable
    with:
      source_branch: 'qa'                    # Desde qa
      target_branch: 'integration'                     # Hacia integration
      pr_title: '🚀 Deploy qa to integration'
      environment: 'integration'
      labels: 'automated,deployment,integration,qa'

  # ───────────────────────────────────────────────────────────
  # Job 3: Despliegue a GKS QA (solo si se aprueba manualmente)
  # ───────────────────────────────────────────────────────────
  deploy-gks-qa:
    name: Deploy to GKS QA
    needs: test
    if: github.event_name == 'workflow_dispatch' && inputs.deploy_to_gks == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to GKS QA
        run: |
          echo "🚀 Deploying to GKS QA environment..."
          # Aquí van tus comandos de despliegue a GKS
          # Por ejemplo:
          # gcloud container clusters get-credentials your-cluster --zone=your-zone
          # kubectl apply -f k8s/qa/
        env:
          GKS_PROJECT: ${{ secrets.GKS_PROJECT }}
          GKS_CLUSTER: ${{ secrets.GKS_CLUSTER }}


   
