permissions:
  actions: read
  contents: write
  pull-requests: write
  security-events: write
  issues: write  # Para crear/cerrar issues de aprobación

name: Run Qa Tests

on:
  push:
    branches:
      - qa
  workflow_dispatch:  # ✅ Permite ejecución manual
  issue_comment:      # ✅ Aprobación via comentario en issue
    types: [created]

# ───────────────────────────────────────────────────────────
# Job 1: Ejecutar tests 
# ───────────────────────────────────────────────────────────
jobs:
  test:
    name: Run Qa Tests
    if: ${{ github.event_name != 'issue_comment' }}  # No ejecutar en comentarios
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/qa.yml@main
    with:
      branch: "qa"
      projectBaseDir: "./pipeline-build"
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_app
        -Dsonar.projectName=app
        -Dsonar.python.version=3.10
        -Dsonar.sources=system_info_app
        -Dsonar.tests=system_info_app/test
        -Dsonar.test.inclusions=**/test/**,**/tests/**
        -Dsonar.coverage.exclusions=**/test/**,**/tests/**
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  # ───────────────────────────────────────────────────────────
  # Job 2: Crear PR a Integration
  # ───────────────────────────────────────────────────────────
  create-pr-to-integration:
    name: Create PR to Integration
    needs: test
    if: ${{ github.event_name != 'issue_comment' }}
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/pull-request.yml@main
    with:
      source_branch: 'qa'
      target_branch: 'integration'
      pr_title: '🚀 Deploy qa to integration'
      environment: 'integration'
      labels: 'automated,deployment,integration,qa'

  # ───────────────────────────────────────────────────────────
  # Job 3: Crear Issue de Aprobación para Despliegue
  # ───────────────────────────────────────────────────────────
  create-approval-issue:
    name: Create Deployment Approval Issue
    needs: create-pr-to-integration
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event_name != 'issue_comment'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Approval Issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENVIRONMENT: qa
          RUNNUMBER: ${{ github.run_number }}
          BRANCH: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
        with:
          filename: .github/deployment-approval-qa.md
          update_existing: false

  # ───────────────────────────────────────────────────────────
  # Job 4: Parser de Issue - Procesar Aprobación
  # ───────────────────────────────────────────────────────────
  parse-approval:
    name: Parse Approval Comment
    if: |
      github.event_name == 'issue_comment' &&
      !github.event.issue.pull_request && 
      github.event.comment.body == 'Approved'
    runs-on: ubuntu-latest
    outputs:
      deploy-environment: ${{ fromJSON(steps.issue_body_parser.outputs.payload).environment }}
      run-number: ${{ fromJSON(steps.issue_body_parser.outputs.payload).runNumber }}
      branch: ${{ fromJSON(steps.issue_body_parser.outputs.payload).branch }}
    
    steps:
      - name: Comment on Issue - Deployment Initiated
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## 🚀 Deployment Initiated
            
            **Environment:** QA
            **Initiated by:** @${{ github.actor }}
            **Timestamp:** ${{ github.event.comment.created_at }}
            
            Proceeding with deployment...
          
      - name: Get Issue Data
        uses: peter-murray/issue-body-parser-action@v1
        id: issue_body_parser
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
          payload_marker: deployment_payload

  # ───────────────────────────────────────────────────────────
  # Job 5: Despliegue a QA (después de aprobación)
  # ───────────────────────────────────────────────────────────
  deploy-qa:
    name: Deploy to QA Environment
    needs: parse-approval
    if: |
      github.event_name == 'issue_comment' &&
      needs.parse-approval.outputs.deploy-environment == 'qa'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: qa
      
      - name: Download Artifacts (if needed)
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          workflow: qa-tests.yml
          repo: ${{ github.repository }}
          run_number: ${{ needs.parse-approval.outputs.run-number }}
          name: qa-artifacts
          path: ${{ github.workspace }}/artifacts
      
      - name: Deploy to QA
        run: |
          echo "🚀 Deploying to QA Environment"
          echo "Branch: ${{ needs.parse-approval.outputs.branch }}"
          echo "Run Number: ${{ needs.parse-approval.outputs.run-number }}"
          echo "Approved by: ${{ github.actor }}"
          # Aquí van tus comandos de despliegue reales
          
      - name: Verify Deployment
        run: |
          echo "✅ Deployment to QA completed successfully"
          echo "Environment URL: https://qa.ejemplo.com"

  # ───────────────────────────────────────────────────────────
  # Job 6: Saludo Manual (ejemplo simple con aprobación)
  # ───────────────────────────────────────────────────────────
  saludar:
    name: Decir Hola Mundo
    needs: parse-approval
    if: |
      github.event_name == 'issue_comment' &&
      needs.parse-approval.outputs.deploy-environment == 'qa'
    runs-on: ubuntu-latest
    
    steps:
      - name: Hola Mundo
        run: |
          echo "¡Hola Mundo! 👋"
          echo "👤 Aprobado por: ${{ github.actor }}"
          echo "📦 Repositorio: ${{ github.repository }}"
          echo "🌿 Branch: ${{ needs.parse-approval.outputs.branch }}"
          echo "🔢 Run Number: ${{ needs.parse-approval.outputs.run-number }}"
          echo "⏰ Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

  # ───────────────────────────────────────────────────────────
  # Job 7: Cerrar Issue después del despliegue
  # ───────────────────────────────────────────────────────────
  close-approval-issue:
    name: Close Approval Issue
    needs: [parse-approval, deploy-qa, saludar]
    if: always() && github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    
    steps:
      - name: Comment Deployment Result
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## 🌟 Deployment Completed
            
            **Status:** ${{ needs.deploy-qa.result == 'success' && '✅ Success' || '❌ Failed' }}
            **Environment:** QA
            **Completed by:** @${{ github.actor }}
            **Duration:** Completed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            ${{ needs.deploy-qa.result == 'success' && '🎉 Deployment successful!' || '⚠️ Deployment failed. Check logs for details.' }}
      
      - name: Close Issue
        if: needs.deploy-qa.result == 'success'
        uses: peter-evans/close-issue@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            ✨ Issue closed automatically after successful deployment
            
            Check the deployment at: https://qa.ejemplo.com

  # ───────────────────────────────────────────────────────────
  # Job 8: Despliegue a GKS QA (comentado - para referencia)
  # ───────────────────────────────────────────────────────────
  # deploy-gks-qa:
  #   name: Deploy to GKS QA
  #   needs: parse-approval
  #   if: |
  #     github.event_name == 'issue_comment' &&
  #     needs.parse-approval.outputs.deploy-environment == 'qa'
  #   uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-qa.yml@main
  #   with:
  #     deploy_to_gks: true
  #     branch: qa