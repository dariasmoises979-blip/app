#03-integration_base.yml
name: Run Qa Tests

on:
  push:
    branches:
      - integration

permissions:
  actions: read
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # JOB 1: TESTS DE INTEGRACIÓN
  # ═══════════════════════════════════════════════════════════
  test:
    name: 🧪 Run Qa Tests
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/integration.yml@main

  # ═══════════════════════════════════════════════════════════
  # JOB 2: BUILD DE IMÁGENES DOCKER - SEPARADO POR AMBIENTE
  # ═══════════════════════════════════════════════════════════
  
  # ──────────────────────────────────────────────────────────
  # Build - Ambiente PRE
  # ──────────────────────────────────────────────────────────
  build-image-pre:
    name: 🏗️ Build Docker Image - PRE
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pre
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app  
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ──────────────────────────────────────────────────────────
  # Build - Ambiente STAGING
  # ──────────────────────────────────────────────────────────
  build-image-staging:
    name: 🏗️ Build Docker Image - STAGING
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: staging
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app  
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ──────────────────────────────────────────────────────────
  # Build - Ambiente PRO
  # ──────────────────────────────────────────────────────────
  build-image-pro:
    name: 🏗️ Build Docker Image - PRO
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pro
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app  
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ═══════════════════════════════════════════════════════════
  # JOB 3: SECURITY SCAN - SEPARADO POR AMBIENTE
  # ═══════════════════════════════════════════════════════════
  
  # ──────────────────────────────────────────────────────────
  # Security Scan - Ambiente PRE
  # ──────────────────────────────────────────────────────────
  security-pre:
    name: 🔐 Security Scan - PRE
    needs: build-image-pre
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/security.yml@main
    with:
      image_name: "dariasmoises979/mi-aplicacion"
      image_tag: "pre"
      dockerhub_username: "dariasmoises979"
      enable_sonar: true
      artifact_name: "security-reports-pre-${{ github.run_id }}"  # 🆕 NOMBRE ÚNICO
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ──────────────────────────────────────────────────────────
  # Security Scan - Ambiente STAGING
  # ──────────────────────────────────────────────────────────
  security-staging:
    name: 🔐 Security Scan - STAGING
    needs: build-image-staging
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/security.yml@main
    with:
      image_name: "dariasmoises979/mi-aplicacion"
      image_tag: "staging"
      dockerhub_username: "dariasmoises979"
      enable_sonar: true
      artifact_name: "security-reports-staging-${{ github.run_id }}"  # 🆕 NOMBRE ÚNICO
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ──────────────────────────────────────────────────────────
  # Security Scan - Ambiente PRO
  # ──────────────────────────────────────────────────────────
  security-pro:
    name: 🔐 Security Scan - PRO
    needs: build-image-pro
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/security.yml@main
    with:
      image_name: "dariasmoises979/mi-aplicacion"
      image_tag: "pro"
      dockerhub_username: "dariasmoises979"
      enable_sonar: true
      artifact_name: "security-reports-pro-${{ github.run_id }}"  # 🆕 NOMBRE ÚNICO
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ═══════════════════════════════════════════════════════════
  # JOB 4: BUILD HÍBRIDO - SEPARADO POR AMBIENTE
  # ═══════════════════════════════════════════════════════════
  
  # ──────────────────────────────────────────────────────────
  # Build Híbrido - Ambiente PRE
  # ──────────────────────────────────────────────────────────
  hybrid-pre:
    name: 🔄 Build Híbrido - PRE
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image-hybrid.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pre
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ──────────────────────────────────────────────────────────
  # Build Híbrido - Ambiente STAGING
  # ──────────────────────────────────────────────────────────
  hybrid-staging:
    name: 🔄 Build Híbrido - STAGING
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image-hybrid.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: staging
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ──────────────────────────────────────────────────────────
  # Build Híbrido - Ambiente PRO
  # ──────────────────────────────────────────────────────────
  hybrid-pro:
    name: 🔄 Build Híbrido - PRO
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image-hybrid.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pro
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

  # ═══════════════════════════════════════════════════════════
  # JOB 5: MAIN PIPELINE - SEPARADO POR AMBIENTE
  # ═══════════════════════════════════════════════════════════
  
  # ──────────────────────────────────────────────────────────
  # Main Pipeline - Ambiente PRE
  # ──────────────────────────────────────────────────────────
  main-pipeline-pre:
    name: 🚀 Pipeline Completo - PRE
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/main-pipeline.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pre
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: ./app-repo/local/Dockerfile
      build_context: ./app-repo
      
      # Opciones
      enable_security_scan: true
      enable_sonar: true
    
      # Configuración de SonarCloud
      sonar_project_base_dir: "./pipeline-build"
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_app
        -Dsonar.projectName=app
        -Dsonar.python.version=3.10
        -Dsonar.sources=system_info_app
        -Dsonar.tests=system_info_app/test
        -Dsonar.test.inclusions=**/test/**,**/tests/**
        -Dsonar.coverage.exclusions=**/test/**,**/tests/**
    
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2 }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ──────────────────────────────────────────────────────────
  # Main Pipeline - Ambiente STAGING
  # ──────────────────────────────────────────────────────────
  main-pipeline-staging:
    name: 🚀 Pipeline Completo - STAGING
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/main-pipeline.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: staging
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: ./app-repo/local/Dockerfile
      build_context: ./app-repo
      
      # Opciones
      enable_security_scan: true
      enable_sonar: true
    
      # Configuración de SonarCloud
      sonar_project_base_dir: "./pipeline-build"
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_app
        -Dsonar.projectName=app
        -Dsonar.python.version=3.10
        -Dsonar.sources=system_info_app
        -Dsonar.tests=system_info_app/test
        -Dsonar.test.inclusions=**/test/**,**/tests/**
        -Dsonar.coverage.exclusions=**/test/**,**/tests/**
    
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2 }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ──────────────────────────────────────────────────────────
  # Main Pipeline - Ambiente PRO
  # ──────────────────────────────────────────────────────────
  main-pipeline-pro:
    name: 🚀 Pipeline Completo - PRO
    needs: test
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/main-pipeline.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: pro
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: ./app-repo/local/Dockerfile
      build_context: ./app-repo
      
      # Opciones
      enable_security_scan: true
      enable_sonar: true
    
      # Configuración de SonarCloud
      sonar_project_base_dir: "./pipeline-build"
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_app
        -Dsonar.projectName=app
        -Dsonar.python.version=3.10
        -Dsonar.sources=system_info_app
        -Dsonar.tests=system_info_app/test
        -Dsonar.test.inclusions=**/test/**,**/tests/**
        -Dsonar.coverage.exclusions=**/test/**,**/tests/**
    
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2 }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ═══════════════════════════════════════════════════════════
  # 🆕 JOB 6: GUARDAR TAGS GENERADOS (NUEVO)
  # ═══════════════════════════════════════════════════════════
  save-image-info:
    name: 💾 Save Image Tags
    runs-on: ubuntu-latest
    needs: [build-image-pre, build-image-staging, build-image-pro]
    steps:
      - name: Create image info file
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "💾 SAVING IMAGE TAGS INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Crear archivo con información de las imágenes
          cat > image-info.env << EOF
          IMAGE_NAME=dariasmoises979/mi-aplicacion
          DOCKERHUB_USERNAME=dariasmoises979
          DOCKER_IMAGE=mi-aplicacion
          TAG_PRE=${{ needs.build-image-pre.outputs.image_tag }}
          TAG_STAGING=${{ needs.build-image-staging.outputs.image_tag }}
          TAG_PRO=${{ needs.build-image-pro.outputs.image_tag }}
          FULL_IMAGE_PRE=${{ needs.build-image-pre.outputs.full_image }}
          FULL_IMAGE_STAGING=${{ needs.build-image-staging.outputs.full_image }}
          FULL_IMAGE_PRO=${{ needs.build-image-pro.outputs.full_image }}
          SHORT_SHA=${{ needs.build-image-pre.outputs.short_sha }}
          BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          COMMIT_SHA=${{ github.sha }}
          TRIGGERED_BY=${{ github.actor }}
          WORKFLOW_RUN=${{ github.run_id }}
          BRANCH=${{ github.ref_name }}
          EOF
          
          echo "✅ Image info file created"
          echo ""
          echo "📋 Content:"
          cat image-info.env
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Upload image info artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-info
          path: image-info.env
          retention-days: 3
          overwrite: true

  # ═══════════════════════════════════════════════════════════
  # JOB 7: RESUMEN FINAL (MANTENIDO DEL ORIGINAL)
  # ═══════════════════════════════════════════════════════════
  summary:
    name: 📊 Resumen Final del Pipeline
    needs: 
      - security-pre
      - security-staging
      - security-pro
      - hybrid-pre
      - hybrid-staging
      - hybrid-pro
      - main-pipeline-pre
      - main-pipeline-staging
      - main-pipeline-pro
      - save-image-info
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📋 Generar resumen consolidado
        run: |
          echo "## 📊 Resumen del Pipeline Completo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🏗️ Build de Imágenes" >> $GITHUB_STEP_SUMMARY
          echo "| Ambiente | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PRE | ${{ needs.build-image-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| STAGING | ${{ needs.build-image-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PRO | ${{ needs.build-image-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔐 Análisis de Seguridad" >> $GITHUB_STEP_SUMMARY
          echo "| Ambiente | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PRE | ${{ needs.security-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| STAGING | ${{ needs.security-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PRO | ${{ needs.security-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔄 Build Híbrido" >> $GITHUB_STEP_SUMMARY
          echo "| Ambiente | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PRE | ${{ needs.hybrid-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| STAGING | ${{ needs.hybrid-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PRO | ${{ needs.hybrid-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🚀 Pipeline Completo" >> $GITHUB_STEP_SUMMARY
          echo "| Ambiente | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PRE | ${{ needs.main-pipeline-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| STAGING | ${{ needs.main-pipeline-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PRO | ${{ needs.main-pipeline-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 💾 Artifact Guardado" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Save Tags | ${{ needs.save-image-info.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Tags guardados en artifact 'image-info' para uso en deployment**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Acción**: Los tags están disponibles para el workflow de deployment" >> $GITHUB_STEP_SUMMARY

  # ═══════════════════════════════════════════════════════════
  # JOB 8: CREATE PR TO MAIN (MANTENIDO DEL ORIGINAL)
  # ═══════════════════════════════════════════════════════════
  create-pr-to-integration:
    name: Create PR to Integration
    needs: summary
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/pull-request.yml@main
    with:
      source_branch: 'integration'
      target_branch: 'main'
      pr_title: '🚀 Deploy integration to main'
      environment: 'integration'
      labels: 'automated,deployment,main,integration'