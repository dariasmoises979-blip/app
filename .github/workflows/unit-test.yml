name: Run Unit Tests and Merge to Dev

on:
  push:
    branches: 
      - feature/**

jobs:
  test:
    name: Run Unit Tests
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/test.yml@main

  # Job: Fusiona autom√°ticamente cualquier rama feature/* en la rama dev
  merge-to-dev:
    name: Merge Feature to Dev
    needs: test                     # Espera que el job "test" haya terminado
    runs-on: ubuntu-latest
    if: startsWith(github.ref_name, 'feature/') && success()
    # Solo se ejecuta si:
    # - El nombre de la rama actual comienza con "feature/"
    # - Las pruebas fueron exitosas

    permissions:
      contents: write               # Necesario para hacer push al repo
      pull-requests: write          # (Opcional) Permite crear/actualizar PRs si hiciera falta

    steps:
      # Paso 1: Clonar el repositorio completo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0                   # Obtiene todo el historial
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      # Paso 2: Configurar Git para los commits autom√°ticos
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Paso 3: Hacer merge desde la rama feature/** actual hacia dev
      - name: Merge feature into dev
        run: |
          git fetch origin dev                         # Trae la √∫ltima versi√≥n de dev
          git checkout dev                             # Cambia a la rama dev
          git merge --no-ff origin/${{ github.ref_name }} -m "Auto-merge from ${{ github.ref_name }} after successful tests"
          # origin/${{ github.ref_name }} asegura que tomamos la versi√≥n remota actual de la feature
          git push origin dev                          # Env√≠a los cambios fusionados a la rama dev
                                          # Env√≠a los cambios al repositorio remoto

########################################3

  # Workflow: Crea autom√°ticamente un Pull Request desde QA hacia Integration
  # cuando el merge a dev fue exitoso y las pruebas pasaron correctamente.

  create-pr:
    name: Create Pull Request for QA Manual Merge 
    needs: merge-to-dev                # Espera que el job "merge-to-dev" termine antes
    if: ${{ needs.test.result == 'success' }}  # Solo se ejecuta si el job "test" tuvo √©xito
    runs-on: ubuntu-latest             # Se ejecuta en un runner Ubuntu

    steps:
    # Paso 1: Checkout del repositorio
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: dev                       # Se asegura de usar la rama "dev"
        fetch-depth: 0                 # Obtiene todo el historial (necesario para PRs completos)

    # Paso 2: Obtener el SHA corto del √∫ltimo commit
    - name: Get commit short SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      # Guarda el SHA corto como variable para usarlo despu√©s en el t√≠tulo del PR

    # Paso 3: Crear el Pull Request de QA hacia Integration
    - name: Create Pull Request QA ‚Üí Integration
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GH_TOKEN2 }}   # Usa un token con permisos para crear el PR
        base: qa              # Rama destino del PR
        branch: dev                        # Rama origen del PR
        title: "QA Approval Needed - Commit ${{ steps.vars.outputs.sha_short }}"
        body: |                           # Mensaje que aparecer√° dentro del PR
          üöÄ Se cre√≥ este PR autom√°ticamente desde **dev** hacia **qa** despu√©s de un merge exitoso desde feature.

          Commit asociado: `${{ steps.vars.outputs.sha_short }}`

          Por favor, revisa y aprueba este PR para continuar el flujo hacia **integration**.
        draft: false                      # El PR no es un borrador
        delete-branch: false              # No borra la rama "qa" despu√©s del PR
