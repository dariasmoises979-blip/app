name: Run Unit Tests and Merge to Dev

on:
  push:
    branches: 
      - feature/**

jobs:
  test:
    name: Run Unit Tests
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/test.yml@main

  merge-to-dev:
    name: Merge to Dev
    needs: test
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git credentials
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Merge feature into dev
        run: |
          git fetch origin dev
          git checkout dev
          git merge --no-ff ${{ github.ref }} -m "Auto-merge from ${{ github.ref_name }} after successful tests"
          git push origin dev

########################################3
  create-pr-to-qa:
    name: Create Pull Request from Dev to QA (manual approval)
    needs: merge-to-dev
    runs-on: ubuntu-latest
    if: ${{ needs.merge-to-dev.result == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Pull Request from dev to qa
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          base: qa
          branch: dev
          title: "Promote Dev ‚Üí QA - Commit ${{ steps.vars.outputs.sha_short }}"
          body: |
            üöÄ El merge de feature a **dev** ha sido exitoso y los tests unitarios pasaron.

            Este PR promueve los cambios a **QA** para validaci√≥n.

            Por favor, revisa y aprueba este PR para continuar el flujo.
          draft: false
          delete-branch: false
          

          

  # create-pr:
  #   name: Create PR from feature to dev
  #   needs: test
  #   if: ${{ success() && startsWith(github.ref, 'refs/heads/feature/') }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
          
  #     - name: Create Pull Request to dev branch
  #       id: create-pr
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         # Verificar si ya existe un PR abierto
  #         existing_pr=$(gh pr list --base dev --head ${{ github.ref_name }} --state open --json number --jq '.[0].number')
          
  #         if [ -z "$existing_pr" ]; then
  #           # Crear el PR si no existe
  #           pr_number=$(gh pr create \
  #             --base dev \
  #             --head ${{ github.ref_name }} \
  #             --title "Merge ${{ github.ref_name }} ‚Üí dev" \
  #             --body "‚úÖ Tests passed successfully on \`${{ github.ref_name }}\`
            
  #           **Branch:** \`${{ github.ref_name }}\`
  #           **Target:** \`dev\`
  #           **Commit:** ${{ github.sha }}" \
  #             --json number --jq '.number')
  #           echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
  #           echo "‚úÖ PR #$pr_number created"
  #         else
  #           echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
  #           echo "‚ÑπÔ∏è PR #$existing_pr already exists"
  #         fi

  #     - name: Auto-merge PR
  #       if: steps.create-pr.outputs.pr_number
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         gh pr merge ${{ steps.create-pr.outputs.pr_number }} --auto --squash
  #         echo "‚úÖ Auto-merge enabled for PR #${{ steps.create-pr.outputs.pr_number }}"