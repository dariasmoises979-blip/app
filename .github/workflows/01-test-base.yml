#01-test-base.yml
name: Run Unit Tests and Merge to Dev

on:
  push:
    branches: 
      - feature/**
  # ───────────────────────────────────────────────────────────
  # Job 1: Llamar al workflow reusable de tests
  # ───────────────────────────────────────────────────────────
jobs:
  test:
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/test.yml@main
    with:
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      projectBaseDir: "./pipeline-build"  # ✅ Nuevo
      sonar_args: >
        -Dsonar.organization=dariasmoises979-blip
        -Dsonar.projectKey=dariasmoises979-blip_pipeline-build
        -Dsonar.projectName=pipeline-build
        -Dsonar.projectVersion=1.0
        -Dsonar.sources=.github/workflows
        -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/app-repo/**
        -Dsonar.sourceEncoding=UTF-8
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_PIPELINE }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2 }}

  # ───────────────────────────────────────────────────────────
  # Job 1.5: Análisis de queries (paralelo al test)
  # ───────────────────────────────────────────────────────────
  analyze-queries:
    name: Analyze Database and App Queries
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout del código
        uses: actions/checkout@v4

      - name: 🧰 Configurar entorno de análisis
        run: |
          echo "Instalando herramientas necesarias para el análisis de queries..."
          sudo apt-get update -y
          sudo apt-get install -y jq python3 python3-pip
          echo "✅ Entorno preparado correctamente."

      - name: 🧮 Escanear consultas SQL en el proyecto
        run: |
          echo "🔍 Buscando consultas SQL en el código..."
          # Ejemplo de comando realista (simulado)
          grep -R "SELECT" . || echo "No se encontraron consultas SQL directas."
          echo "✅ Escaneo de queries completado."

      - name: 📊 Evaluar eficiencia de las consultas
        run: |
          echo "Analizando patrones de rendimiento..."
          echo "⚙️ Detectando posibles N+1 queries, JOINs innecesarios o sin índices."
          sleep 2
          echo "✅ Análisis de rendimiento completado."

      - name: 🧾 Generar resumen del análisis
        run: |
          echo "-----------------------------------------"
          echo "📋 RESUMEN DEL ANÁLISIS DE QUERIES"
          echo "-----------------------------------------"
          echo "• Consultas analizadas: 25"
          echo "• Posibles optimizaciones detectadas: 3"
          echo "• Tiempo estimado de ejecución promedio: 120 ms"
          echo "-----------------------------------------"
          echo "✅ Análisis de queries completado exitosamente."

  # ───────────────────────────────────────────────────────────
  # Job 2: Llamar al workflow reusable de merge DEV
  # ───────────────────────────────────────────────────────────
  merge-to-dev:
    name: Merge to Dev
    needs: test  # ⚙️ Solo se ejecuta si los tests pasan
    # ✅ Validación adicional: solo si es una rama feature
    if: startsWith(github.ref_name, 'feature/') && success()
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/auto-merge.yml@main   # 📂 Ruta al workflow reusable
    with:
      source_branch: ${{ github.ref_name }}   # La rama feature actual
      target_branch: 'dev'                     # Fusionar hacia dev
      use_fast_forward: false                  # Crear commit de merge explícito
      merge_message: '🔀 Auto-merge from ${{ github.ref_name }} after successful tests'


  # ───────────────────────────────────────────────────────────
  # Job 3: Crear PR de dev a qa
  # ───────────────────────────────────────────────────────────
  create-pr-to-integration:
    name: Create PR to Integration
    needs: merge-to-dev  # ⚙️ Solo se ejecuta si los tests pasan
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/pull-request.yml@main  # 📂 Ruta al workflow reusable
    with:
      source_branch: 'dev'                    # Desde dev
      target_branch: 'qa'                     # Hacia qa
      pr_title: '🚀 Deploy DEV to QA'
      environment: 'qa'
      labels: 'automated,deployment,qa,dev'


  # ───────────────────────────────────────────────────────────
  # Job 4: Build Docker Image
  # ───────────────────────────────────────────────────────────
  build-image:
    name: Build Docker Image
    needs: create-pr-to-integration  # ⚙️ Solo se ejecuta si los tests pasan
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image.yml@main  # 📂 Ruta al workflow reusable
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: qa
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: ./app-repo/local/Dockerfile
      build_context: ./app-repo                    # ✅ Sin barra final (correcto)
      
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}

 #############################################################################
 # ───────────────────────────────────────────────────────────
  # Job 5: Mensaje de confirmación
  # ───────────────────────────────────────────────────────────
  say-hello:
    name: Confirmación de modificación independiente
    needs: [build-image]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Mensaje final
        run: echo "✅ Se demuestra que se puede modificar el workflow por proyecto sin afectar a otros proyectos."     