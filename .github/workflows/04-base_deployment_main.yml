########################################
# 🚀 DEPLOYMENT WORKFLOW - AUTOMÁTICO
# Se dispara automáticamente cuando completa el workflow de integration
# Lee los tags del artifact y despliega sin intervención manual
# 04-base_deployment_main.yml
########################################

name: Deploy Updated Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


permissions:
  actions: read
  contents: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔍 JOB 1: OBTENER TAGS DEL ARTIFACT
  # ═══════════════════════════════════════════════════════════
  get-image-tags:
    name: 📥 Get Image Tags from Build
    runs-on: ubuntu-latest
    outputs:
      tag_pre: ${{ steps.read-info.outputs.tag_pre }}
      tag_staging: ${{ steps.read-info.outputs.tag_staging }}
      tag_pro: ${{ steps.read-info.outputs.tag_pro }}
      dockerhub_username: ${{ steps.read-info.outputs.dockerhub_username }}
      docker_image: ${{ steps.read-info.outputs.docker_image }}
      image_name: ${{ steps.read-info.outputs.image_name }}
    
    steps:
      - name: Display Workflow Trigger Info
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 DEPLOYMENT WORKFLOW TRIGGERED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Triggered by workflow: "Push/PR to main""
          echo "✅ Workflow status: ${{ github.event_name }}"
          echo "🔢 Workflow Run ID: ${{ github.run_id }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Download artifact from integration workflow
        uses: actions/download-artifact@v4
        with:
          name: image-info.env
          repository: dariasmoises979-blip/app
          run-id: ${{ github.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact downloaded
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 ARTIFACT VERIFICATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Current directory: $(pwd)"
          echo ""
          echo "📋 Downloaded files:"
          ls -la
          echo ""
          
          if [ -f "image-info.env" ]; then
            echo "✅ image-info.env found successfully"
            echo ""
            echo "📄 File content:"
            cat image-info.env
          else
            echo "❌ ERROR: image-info.env not found!"
            echo ""
            echo "Available files in directory:"
            ls -la
            exit 1
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Read and export image information
        id: read-info
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📖 READING IMAGE TAGS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Cargar todas las variables del archivo
          source image-info.env
          
          # Exportar como outputs del job para otros jobs
          echo "tag_pre=${TAG_PRE}" >> $GITHUB_OUTPUT
          echo "tag_staging=${TAG_STAGING}" >> $GITHUB_OUTPUT
          echo "tag_pro=${TAG_PRO}" >> $GITHUB_OUTPUT
          echo "dockerhub_username=${DOCKERHUB_USERNAME}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          
          echo "✅ Tags extracted successfully"
          echo ""
          echo "📋 Image Information:"
          echo "   • Docker Hub User: ${DOCKERHUB_USERNAME}"
          echo "   • Docker Image: ${DOCKER_IMAGE}"
          echo "   • Full Image Name: ${IMAGE_NAME}"
          echo ""
          echo "🏷️  Tags by Environment:"
          echo "   • PRE:     ${TAG_PRE}"
          echo "   • STAGING: ${TAG_STAGING}"
          echo "   • PRO:     ${TAG_PRO}"
          echo ""
          echo "📦 Full Images:"
          echo "   • PRE:     ${FULL_IMAGE_PRE}"
          echo "   • STAGING: ${FULL_IMAGE_STAGING}"
          echo "   • PRO:     ${FULL_IMAGE_PRO}"
          echo ""
          echo "📊 Build Info:"
          echo "   • Short SHA: ${SHORT_SHA}"
          echo "   • Build Date: ${BUILD_DATE}"
          echo "   • Commit: ${COMMIT_SHA}"
          echo "   • Branch: ${BRANCH}"
          echo "   • Triggered by: ${TRIGGERED_BY}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 2: DEPLOY A PRE (AUTOMÁTICO)
  # ═══════════════════════════════════════════════════════════
  deploy-pre:
    name: 🚀 Deploy to PRE
    needs: get-image-tags
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: pre
      image_tag: ${{ needs.get-image-tags.outputs.tag_pre }}
      dockerhub_username: ${{ needs.get-image-tags.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-tags.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][PRE]"
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 3: DEPLOY A STAGING (AUTOMÁTICO - DESPUÉS DE PRE)
  # ═══════════════════════════════════════════════════════════
  deploy-staging:
    name: 🚀 Deploy to STAGING
    needs: [get-image-tags, deploy-pre]
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: staging
      image_tag: ${{ needs.get-image-tags.outputs.tag_staging }}
      dockerhub_username: ${{ needs.get-image-tags.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-tags.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][STAGING]"
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 🔐 JOB 4: DEPLOY A PRO (AUTOMÁTICO - DESPUÉS DE STAGING)
  # ═══════════════════════════════════════════════════════════
  deploy-pro:
    name: 🔐 Deploy to PRO
    needs: [get-image-tags, deploy-staging]
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: pro
      image_tag: ${{ needs.get-image-tags.outputs.tag_pro }}
      dockerhub_username: ${{ needs.get-image-tags.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-tags.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][PRO]"
      requires_approval: true  # Requiere aprobación en GitHub Environments
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 5: RESUMEN FINAL DEL DEPLOYMENT
  # ═══════════════════════════════════════════════════════════
  deployment-summary:
    name: 📊 Deployment Summary
    needs:
      - get-image-tags
      - deploy-pre
      - deploy-staging
      - deploy-pro
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🐳 Docker Images Deployed:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Base Image: ${{ needs.get-image-tags.outputs.image_name }}"
          echo ""
          echo "🌍 PRE Environment:"
          echo "   • Tag: ${{ needs.get-image-tags.outputs.tag_pre }}"
          echo "   • Status: ${{ needs.deploy-pre.result }}"
          echo "   • Location: kubernetes/pre/"
          echo ""
          echo "🌍 STAGING Environment:"
          echo "   • Tag: ${{ needs.get-image-tags.outputs.tag_staging }}"
          echo "   • Status: ${{ needs.deploy-staging.result }}"
          echo "   • Location: kubernetes/staging/"
          echo ""
          echo "🌍 PRO Environment:"
          echo "   • Tag: ${{ needs.get-image-tags.outputs.tag_pro }}"
          echo "   • Status: ${{ needs.deploy-pro.result }}"
          echo "   • Location: kubernetes/pro/"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Job Results Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "   • Get Tags:       ${{ needs.get-image-tags.result }}"
          echo "   • Deploy PRE:     ${{ needs.deploy-pre.result }}"
          echo "   • Deploy STAGING: ${{ needs.deploy-staging.result }}"
          echo "   • Deploy PRO:     ${{ needs.deploy-pro.result }}"
          echo ""
          echo "🕐 Completed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo ""
          echo "🔗 Workflow Run:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "🔗 Source Build:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Check for Failures
        if: |
          needs.get-image-tags.result == 'failure' ||
          needs.deploy-pre.result == 'failure' ||
          needs.deploy-staging.result == 'failure' ||
          needs.deploy-pro.result == 'failure'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ DEPLOYMENT FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  One or more deployment jobs failed"
          echo ""
          echo "🔍 Failed Jobs:"
          [ "${{ needs.get-image-tags.result }}" == "failure" ] && echo "   • Get Image Tags"
          [ "${{ needs.deploy-pre.result }}" == "failure" ] && echo "   • Deploy PRE"
          [ "${{ needs.deploy-staging.result }}" == "failure" ] && echo "   • Deploy STAGING"
          [ "${{ needs.deploy-pro.result }}" == "failure" ] && echo "   • Deploy PRO"
          echo ""
          echo "🔗 Check detailed logs at:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1

      - name: Success Notification
        if: |
          needs.get-image-tags.result == 'success' &&
          needs.deploy-pre.result == 'success' &&
          needs.deploy-staging.result == 'success' &&
          needs.deploy-pro.result == 'success'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ ALL DEPLOYMENTS COMPLETED SUCCESSFULLY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🎯 What happened:"
          echo "   1. ✅ Tags retrieved from integration build"
          echo "   2. ✅ PRE manifests updated and committed"
          echo "   3. ✅ STAGING manifests updated and committed"
          echo "   4. ✅ PRO manifests updated and committed"
          echo ""
          echo "🔄 Next Steps:"
          echo "   • ArgoCD will detect the changes"
          echo "   • Applications will sync automatically"
          echo "   • Monitor ArgoCD UI for deployment status"
          echo ""
          echo "📂 Updated Locations:"
          echo "   • kubernetes/pre/*.yaml"
          echo "   • kubernetes/staging/*.yaml"
          echo "   • kubernetes/pro/*.yaml"
          echo ""
          echo "🔗 View Changes:"
          echo "   git log kubernetes/ -3"
          echo ""
          echo "🐳 Docker Images:"
          echo "   • PRE:     ${{ needs.get-image-tags.outputs.dockerhub_username }}/${{ needs.get-image-tags.outputs.docker_image }}:${{ needs.get-image-tags.outputs.tag_pre }}"
          echo "   • STAGING: ${{ needs.get-image-tags.outputs.dockerhub_username }}/${{ needs.get-image-tags.outputs.docker_image }}:${{ needs.get-image-tags.outputs.tag_staging }}"
          echo "   • PRO:     ${{ needs.get-image-tags.outputs.dockerhub_username }}/${{ needs.get-image-tags.outputs.docker_image }}:${{ needs.get-image-tags.outputs.tag_pro }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Create Job Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Images Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **PRE** | \`${{ needs.get-image-tags.outputs.tag_pre }}\` | ${{ needs.deploy-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **STAGING** | \`${{ needs.get-image-tags.outputs.tag_staging }}\` | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **PRO** | \`${{ needs.get-image-tags.outputs.tag_pro }}\` | ${{ needs.deploy-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 Updated Locations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- \`kubernetes/pre/\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`kubernetes/staging/\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`kubernetes/pro/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Source Build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub](https://hub.docker.com/r/${{ needs.get-image-tags.outputs.dockerhub_username }}/${{ needs.get-image-tags.outputs.docker_image }}/tags)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY