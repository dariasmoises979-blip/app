########################################
# 🚀 DEPLOYMENT WORKFLOW
# Consume los tags del workflow de integration y despliega
# 🆕 LEE LOS TAGS DESDE EL ARTIFACT GENERADO
#04-base_deployment_main.yml
########################################

name: Deploy to Environments

on:
  workflow_run:
    workflows: ["Run Qa Tests"]  # Nombre del workflow 03-integration_base.yml
    types:
      - completed

  # Permitir ejecución manual para re-deploys
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - pre
          - staging
          - pro
      workflow_run_id:
        description: 'Workflow Run ID to get artifacts from (leave empty for latest)'
        required: false
        type: string

permissions:
  actions: read
  contents: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔍 JOB 1: VERIFICAR Y DESCARGAR ARTIFACT
  # ═══════════════════════════════════════════════════════════
  get-image-info:
    name: 📥 Get Image Tags from Artifact
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      tag_pre: ${{ steps.read-info.outputs.tag_pre }}
      tag_staging: ${{ steps.read-info.outputs.tag_staging }}
      tag_pro: ${{ steps.read-info.outputs.tag_pro }}
      image_name: ${{ steps.read-info.outputs.image_name }}
      full_image_pre: ${{ steps.read-info.outputs.full_image_pre }}
      full_image_staging: ${{ steps.read-info.outputs.full_image_staging }}
      full_image_pro: ${{ steps.read-info.outputs.full_image_pro }}
      dockerhub_username: ${{ steps.read-info.outputs.dockerhub_username }}
      docker_image: ${{ steps.read-info.outputs.docker_image }}
    
    steps:
      - name: Display Trigger Information
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 DEPLOYMENT TRIGGER INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "📋 Triggered by workflow: ${{ github.event.workflow_run.name }}"
            echo "✅ Status: ${{ github.event.workflow_run.conclusion }}"
            echo "🔢 Run ID: ${{ github.event.workflow_run.id }}"
            echo "🌿 Branch: ${{ github.event.workflow_run.head_branch }}"
          else
            echo "🖱️  Manual trigger"
            echo "🌍 Selected environment: ${{ github.event.inputs.environment }}"
            if [ -n "${{ github.event.inputs.workflow_run_id }}" ]; then
              echo "🔢 Using Run ID: ${{ github.event.inputs.workflow_run_id }}"
            fi
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Download artifact from integration workflow
        uses: actions/download-artifact@v4
        with:
          name: image-info
          run-id: ${{ github.event.inputs.workflow_run_id || github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact downloaded
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 ARTIFACT VERIFICATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Current directory:"
          pwd
          echo ""
          echo "📋 Files downloaded:"
          ls -la
          echo ""
          if [ -f "image-info.env" ]; then
            echo "✅ image-info.env found"
            echo ""
            echo "📄 Content:"
            cat image-info.env
          else
            echo "❌ ERROR: image-info.env not found!"
            echo ""
            echo "Available files:"
            ls -la
            exit 1
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Read image info and export
        id: read-info
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📖 READING IMAGE INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Cargar variables del archivo
          source image-info.env
          
          # Exportar como outputs del job
          echo "tag_pre=${TAG_PRE}" >> $GITHUB_OUTPUT
          echo "tag_staging=${TAG_STAGING}" >> $GITHUB_OUTPUT
          echo "tag_pro=${TAG_PRO}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "full_image_pre=${FULL_IMAGE_PRE}" >> $GITHUB_OUTPUT
          echo "full_image_staging=${FULL_IMAGE_STAGING}" >> $GITHUB_OUTPUT
          echo "full_image_pro=${FULL_IMAGE_PRO}" >> $GITHUB_OUTPUT
          
          # Extraer username y nombre de imagen
          DOCKERHUB_USERNAME=$(echo ${IMAGE_NAME} | cut -d'/' -f1)
          DOCKER_IMAGE=$(echo ${IMAGE_NAME} | cut -d'/' -f2)
          
          echo "dockerhub_username=${DOCKERHUB_USERNAME}" >> $GITHUB_OUTPUT
          echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          
          echo "✅ Variables exported successfully"
          echo ""
          echo "📋 Exported values:"
          echo "   • Image Name: ${IMAGE_NAME}"
          echo "   • Docker Hub User: ${DOCKERHUB_USERNAME}"
          echo "   • Docker Image: ${DOCKER_IMAGE}"
          echo "   • Tag PRE: ${TAG_PRE}"
          echo "   • Tag STAGING: ${TAG_STAGING}"
          echo "   • Tag PRO: ${TAG_PRO}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 2: DEPLOY A PRE (Automático)
  # ═══════════════════════════════════════════════════════════
  deploy-pre:
    name: 🚀 Deploy to PRE
    needs: get-image-info
    if: |
      github.event_name == 'workflow_run' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pre')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: pre
      image_tag: ${{ needs.get-image-info.outputs.tag_pre }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][PRE]"
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 3: DEPLOY A STAGING (Automático)
  # ═══════════════════════════════════════════════════════════
  deploy-staging:
    name: 🚀 Deploy to STAGING
    needs: [get-image-info, deploy-pre]
    if: |
      github.event_name == 'workflow_run' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: staging
      image_tag: ${{ needs.get-image-info.outputs.tag_staging }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][STAGING]"
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 🔐 JOB 4: DEPLOY A PRO (Manual - Requiere Aprobación)
  # ═══════════════════════════════════════════════════════════
  deploy-pro:
    name: 🔐 Deploy to PRO (Requires Approval)
    needs: [get-image-info, deploy-staging]
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'pro'
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: pro
      image_tag: ${{ needs.get-image-info.outputs.tag_pro }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps][PRO]"
      requires_approval: true
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 5: RESUMEN FINAL DEL DEPLOYMENT
  # ═══════════════════════════════════════════════════════════
  deployment-summary:
    name: 📊 Deployment Summary
    needs:
      - get-image-info
      - deploy-pre
      - deploy-staging
      - deploy-pro
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🐳 Docker Images Deployed:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Image: ${{ needs.get-image-info.outputs.image_name }}"
          echo ""
          echo "🌍 PRE Environment:"
          echo "   • Tag: ${{ needs.get-image-info.outputs.tag_pre }}"
          echo "   • Full Image: ${{ needs.get-image-info.outputs.full_image_pre }}"
          echo "   • Status: ${{ needs.deploy-pre.result }}"
          echo ""
          echo "🌍 STAGING Environment:"
          echo "   • Tag: ${{ needs.get-image-info.outputs.tag_staging }}"
          echo "   • Full Image: ${{ needs.get-image-info.outputs.full_image_staging }}"
          echo "   • Status: ${{ needs.deploy-staging.result }}"
          echo ""
          echo "🌍 PRO Environment:"
          echo "   • Tag: ${{ needs.get-image-info.outputs.tag_pro }}"
          echo "   • Full Image: ${{ needs.get-image-info.outputs.full_image_pro }}"
          echo "   • Status: ${{ needs.deploy-pro.result || 'not triggered' }}"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 Job Results:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "   • Get Image Info: ${{ needs.get-image-info.result }}"
          echo "   • Deploy PRE: ${{ needs.deploy-pre.result }}"
          echo "   • Deploy STAGING: ${{ needs.deploy-staging.result }}"
          echo "   • Deploy PRO: ${{ needs.deploy-pro.result || 'skipped' }}"
          echo ""
          echo "🕐 Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo ""
          echo "🔗 Workflow Run:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Check for Failures
        if: |
          needs.get-image-info.result == 'failure' ||
          needs.deploy-pre.result == 'failure' ||
          needs.deploy-staging.result == 'failure' ||
          needs.deploy-pro.result == 'failure'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ DEPLOYMENT FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  One or more deployment jobs failed"
          echo ""
          echo "🔍 Failed Jobs:"
          [ "${{ needs.get-image-info.result }}" == "failure" ] && echo "   • Get Image Info"
          [ "${{ needs.deploy-pre.result }}" == "failure" ] && echo "   • Deploy PRE"
          [ "${{ needs.deploy-staging.result }}" == "failure" ] && echo "   • Deploy STAGING"
          [ "${{ needs.deploy-pro.result }}" == "failure" ] && echo "   • Deploy PRO"
          echo ""
          echo "🔗 Check logs at:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1

      - name: Success Summary
        if: |
          needs.get-image-info.result == 'success' &&
          needs.deploy-pre.result == 'success' &&
          needs.deploy-staging.result == 'success'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ DEPLOYMENT COMPLETED SUCCESSFULLY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🎯 Next Steps:"
          echo "   1. ✅ Manifests updated in repository"
          echo "   2. 🔄 ArgoCD will detect and sync changes"
          echo "   3. 🚀 Applications will be deployed automatically"
          echo "   4. 📊 Monitor ArgoCD for sync status"
          echo ""
          echo "🔗 Resources:"
          echo "   • Repository: ${{ github.server_url }}/${{ github.repository }}"
          echo "   • Manifests: kubernetes/pre, kubernetes/staging, kubernetes/pro"
          echo "   • Docker Hub: https://hub.docker.com/r/${{ needs.get-image-info.outputs.dockerhub_username }}/${{ needs.get-image-info.outputs.docker_image }}"
          echo ""
          if [ "${{ needs.deploy-pro.result }}" == "skipped" ]; then
            echo "ℹ️  PRO deployment skipped (requires manual trigger)"
            echo "   To deploy to PRO, run this workflow manually and select 'pro' environment"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"