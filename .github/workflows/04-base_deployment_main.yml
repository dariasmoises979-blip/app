########################################
# 🚀 WORKFLOW: Deploy to Kubernetes
# Descarga los tags generados por el build pipeline
# y actualiza los manifiestos de Kubernetes
# 04-deploy-kubernetes.yml
########################################

name: Deploy to Kubernetes

on:
  # Se ejecuta manualmente o desde otro workflow
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar (pro/pre/staging)'
        required: true
        type: choice
        options:
          - pre
          - staging
          - pro
      skip_approval:
        description: 'Omitir aprobación manual'
        required: false
        type: boolean
        default: false
  
  # Se dispara cuando se hace push a main desde integration
  push:
    branches:
      - main
  
  # También puede ser llamado desde integration workflow
  workflow_run:
    workflows: ["Run Qa Tests"]
    types:
      - completed
    branches:
      - integration

permissions:
  actions: read
  contents: write
  pull-requests: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # JOB 1: DESCARGAR INFORMACIÓN DE LAS IMÁGENES
  # ═══════════════════════════════════════════════════════════
  get-image-info:
    name: 📥 Get Image Info
    runs-on: ubuntu-latest
    # Solo si el workflow anterior fue exitoso o es manual
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event.workflow_run.conclusion == 'success'
    
    outputs:
      image_name: ${{ steps.load_info.outputs.image_name }}
      dockerhub_username: ${{ steps.load_info.outputs.dockerhub_username }}
      docker_image: ${{ steps.load_info.outputs.docker_image }}
      tag_pre: ${{ steps.load_info.outputs.tag_pre }}
      tag_staging: ${{ steps.load_info.outputs.tag_staging }}
      tag_pro: ${{ steps.load_info.outputs.tag_pro }}
      full_image_pre: ${{ steps.load_info.outputs.full_image_pre }}
      full_image_staging: ${{ steps.load_info.outputs.full_image_staging }}
      full_image_pro: ${{ steps.load_info.outputs.full_image_pro }}
      short_sha: ${{ steps.load_info.outputs.short_sha }}
    
    steps:
      - name: 📥 Download image info artifact
        uses: actions/download-artifact@v4
        with:
          name: image-info
          # Si viene de workflow_run, necesitamos el run_id del workflow anterior
          run-id: ${{ github.event.workflow_run.id || github.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 📋 Load image information
        id: load_info
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 LOADING IMAGE INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ -f "image-info.env" ]; then
            echo "✅ Image info file found"
            echo ""
            echo "📄 Content:"
            cat image-info.env
            echo ""
            
            # Cargar variables del archivo
            source image-info.env
            
            # Exportar como outputs
            echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
            echo "dockerhub_username=${DOCKERHUB_USERNAME}" >> $GITHUB_OUTPUT
            echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
            echo "tag_pre=${TAG_PRE}" >> $GITHUB_OUTPUT
            echo "tag_staging=${TAG_STAGING}" >> $GITHUB_OUTPUT
            echo "tag_pro=${TAG_PRO}" >> $GITHUB_OUTPUT
            echo "full_image_pre=${FULL_IMAGE_PRE}" >> $GITHUB_OUTPUT
            echo "full_image_staging=${FULL_IMAGE_STAGING}" >> $GITHUB_OUTPUT
            echo "full_image_pro=${FULL_IMAGE_PRO}" >> $GITHUB_OUTPUT
            echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
            
            echo ""
            echo "✅ Image information loaded successfully"
          else
            echo "⚠️  Image info file not found"
            echo "Using default values..."
            
            # Valores por defecto
            echo "image_name=dariasmoises979/mi-aplicacion" >> $GITHUB_OUTPUT
            echo "dockerhub_username=dariasmoises979" >> $GITHUB_OUTPUT
            echo "docker_image=mi-aplicacion" >> $GITHUB_OUTPUT
            echo "tag_pre=pre-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "tag_staging=staging-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "tag_pro=pro-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # JOB 2: APROBACIÓN MANUAL (SOLO PARA PRO)
  # ═══════════════════════════════════════════════════════════
  approval:
    name: 🔐 Approval Required
    needs: get-image-info
    runs-on: ubuntu-latest
    # Solo requerir aprobación para PRO y si no se omite
    if: |
      (github.event.inputs.environment == 'pro' || 
       (github.event_name == 'workflow_run' && contains(github.event.workflow_run.head_branch, 'main'))) &&
      github.event.inputs.skip_approval != 'true'
    environment:
      name: production-approval
    
    steps:
      - name: 🔐 Manual approval required
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔐 DEPLOYMENT APPROVAL REQUIRED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: PRO"
          echo "🐳 Image: ${{ needs.get-image-info.outputs.full_image_pro }}"
          echo ""
          echo "⏳ Waiting for manual approval..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # JOB 3: DEPLOY A PRE
  # ═══════════════════════════════════════════════════════════
  deploy-pre:
    name: 🚀 Deploy to PRE
    needs: get-image-info
    if: |
      github.event.inputs.environment == 'pre' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      project_name: ${{ github.event.repository.name }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      environment: pre
      image_tag: ${{ needs.get-image-info.outputs.tag_pre }}
      manifests_path: kubernetes/pre/${{ github.event.repository.name }}
      manifest_files: app.yaml
      create_pr: false
      target_branch: main
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN2 }}

  # ═══════════════════════════════════════════════════════════
  # JOB 4: DEPLOY A STAGING
  # ═══════════════════════════════════════════════════════════
  deploy-staging:
    name: 🚀 Deploy to STAGING
    needs: [get-image-info, deploy-pre]
    if: |
      github.event.inputs.environment == 'staging' ||
      (needs.deploy-pre.result == 'success' && github.event_name == 'workflow_run')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      project_name: ${{ github.event.repository.name }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      environment: staging
      image_tag: ${{ needs.get-image-info.outputs.tag_staging }}
      manifests_path: kubernetes/staging/${{ github.event.repository.name }}
      manifest_files: app.yaml
      create_pr: false
      target_branch: main
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN2 }}

  # ═══════════════════════════════════════════════════════════
  # JOB 5: DEPLOY A PRO (CON APROBACIÓN)
  # ═══════════════════════════════════════════════════════════
  deploy-pro:
    name: 🚀 Deploy to PRO
    needs: [get-image-info, approval, deploy-staging]
    if: |
      always() &&
      (needs.approval.result == 'success' || needs.approval.result == 'skipped') &&
      (github.event.inputs.environment == 'pro' || needs.deploy-staging.result == 'success')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      project_name: ${{ github.event.repository.name }}
      docker_image: ${{ needs.get-image-info.outputs.docker_image }}
      dockerhub_username: ${{ needs.get-image-info.outputs.dockerhub_username }}
      environment: pro
      image_tag: ${{ needs.get-image-info.outputs.tag_pro }}
      manifests_path: kubernetes/pro/${{ github.event.repository.name }}
      manifest_files: app.yaml
      create_pr: true
      target_branch: main
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN2 }}

  # ═══════════════════════════════════════════════════════════
  # JOB 6: RESUMEN FINAL DEL DEPLOYMENT
  # ═══════════════════════════════════════════════════════════
  deployment-summary:
    name: 📊 Deployment Summary
    needs: 
      - get-image-info
      - deploy-pre
      - deploy-staging
      - deploy-pro
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Generate deployment summary
        run: |
          echo "## 📊 Kubernetes Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Image Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PRE | \`${{ needs.get-image-info.outputs.tag_pre }}\` | ${{ needs.deploy-pre.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| STAGING | \`${{ needs.get-image-info.outputs.tag_staging }}\` | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PRO | \`${{ needs.get-image-info.outputs.tag_pro }}\` | ${{ needs.deploy-pro.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`${{ needs.get-image-info.outputs.docker_image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **DockerHub User**: \`${{ needs.get-image-info.outputs.dockerhub_username }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: \`${{ needs.get-image-info.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [DockerHub](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Estado general
          if [[ "${{ needs.deploy-pre.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-staging.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-pro.result }}" == "success" || "${{ needs.deploy-pro.result }}" == "skipped" ]]; then
            echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "All environments have been updated successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Deployment Incomplete" >> $GITHUB_STEP_SUMMARY
            echo "Some environments failed or were skipped. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Console Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 KUBERNETES DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🐳 Docker Image: ${{ needs.get-image-info.outputs.docker_image }}"
          echo "🔗 Commit SHA: ${{ needs.get-image-info.outputs.short_sha }}"
          echo ""
          echo "📋 Deployment Status:"
          echo "   • PRE:     ${{ needs.deploy-pre.result }}"
          echo "   • STAGING: ${{ needs.deploy-staging.result }}"
          echo "   • PRO:     ${{ needs.deploy-pro.result }}"
          echo ""
          echo "🏷️  Tags Used:"
          echo "   • PRE:     ${{ needs.get-image-info.outputs.tag_pre }}"
          echo "   • STAGING: ${{ needs.get-image-info.outputs.tag_staging }}"
          echo "   • PRO:     ${{ needs.get-image-info.outputs.tag_pro }}"
          echo ""
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"