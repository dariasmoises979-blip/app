########################################
# 🚀 CI/CD PIPELINE COMPLETO
# Build de imagen Docker + GitOps deployment con ArgoCD
# 🆕 USA EL TAG GENERADO POR EL BUILD
#04-base_deployment_main.yml
########################################

name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  # Permitir ejecución manual con selección de entorno
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - qa
          - staging
          - pre
          - prod
      force_build:
        description: 'Force rebuild even if no changes'
        required: false
        type: boolean
        default: false

# Prevenir ejecuciones concurrentes por rama
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🎯 JOB 1: DETERMINAR ENTORNO BASADO EN LA RAMA
  # ═══════════════════════════════════════════════════════════
  determine-environment:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      
    steps:
      - name: Determine Environment from Branch
        id: env
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 DETERMINING DEPLOYMENT ENVIRONMENT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Si es workflow_dispatch, usar el input del usuario
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SHOULD_DEPLOY="true"
            echo "🖱️  Manual trigger detected"
            echo "🌍 Selected environment: ${ENVIRONMENT}"
          
          # Si es pull_request, solo build sin deploy
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            ENVIRONMENT="dev"
            SHOULD_DEPLOY="false"
            echo "🔀 Pull Request detected"
            echo "🔨 Will build image but NOT deploy"
          
          # Determinar por rama
          else
            BRANCH="${{ github.ref_name }}"
            echo "🌿 Branch: ${BRANCH}"
            
            case "${BRANCH}" in
              main|master)
                ENVIRONMENT="prod"
                SHOULD_DEPLOY="true"
                ;;
              release/*)
                ENVIRONMENT="pre"
                SHOULD_DEPLOY="true"
                ;;
              staging)
                ENVIRONMENT="staging"
                SHOULD_DEPLOY="true"
                ;;
              develop|development)
                ENVIRONMENT="dev"
                SHOULD_DEPLOY="true"
                ;;
              *)
                ENVIRONMENT="dev"
                SHOULD_DEPLOY="false"
                echo "⚠️  Feature branch detected - will build but not deploy"
                ;;
            esac
          fi
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "should_deploy=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 Results:"
          echo "   • Environment: ${ENVIRONMENT}"
          echo "   • Should Deploy: ${SHOULD_DEPLOY}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🐳 JOB 2: BUILD & PUSH IMAGEN DOCKER
  # ═══════════════════════════════════════════════════════════
  # build-docker-image:
  #   name: 🐳 Build Docker Image
  #   needs: determine-environment
  #   uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image.yml@main
  #   with:
  #       docker_image: mi-aplicacion
  #       dockerhub_username: dariasmoises979
  #       environment: qa
        
  #       # Configuración del repo externo
  #       external_repo: dariasmoises979-blip/app
  #       external_repo_ref: main
  #       external_repo_path: ./app-repo
        
  #       # Rutas del build
  #       dockerfile_path: ./app-repo/local/Dockerfile
  #       build_context: ./app-repo                    # ✅ Sin barra final (correcto)
        
  #   secrets:
  #       DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  #       EXTERNAL_REPO_TOKEN: ${{ secrets.GH_TOKEN2}}
  

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 3: MOSTRAR TAG GENERADO
  # ═══════════════════════════════════════════════════════════
  show-build-output:
    name: 📊 Show Build Output
    needs: determine-environment
    runs-on: ubuntu-latest
    steps:
      - name: Display Build Output
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 BUILD OUTPUT INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏷️  Primary Tag: ${{ needs.build-docker-image.outputs.image_tag }}"
          echo "📦 Full Image: ${{ needs.build-docker-image.outputs.full_image }}"
          echo "🔗 Short SHA: ${{ needs.build-docker-image.outputs.short_sha }}"
          echo "📋 All Tags: ${{ needs.build-docker-image.outputs.all_tags }}"
          echo ""
          echo "🎯 This tag will be used for deployment:"
          echo "   ${{ needs.build-docker-image.outputs.image_tag }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 4: DESPLIEGUE GITOPS (DEV & STAGING - AUTOMÁTICO)
  # ═══════════════════════════════════════════════════════════
  deploy-auto:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    needs: 
      - determine-environment
    if: |
      needs.determine-environment.outputs.should_deploy == 'true' && 
      (needs.determine-environment.outputs.environment == 'dev' || 
       needs.determine-environment.outputs.environment == 'staging')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: ${{ needs.determine-environment.outputs.environment }}
      # 🎯 USAR EL TAG GENERADO POR EL BUILD
      image_tag: ${{ needs.build-docker-image.outputs.image_tag }}
      dockerhub_username: "tu-usuario"  # 👈 Debe coincidir con el de build
      docker_image: "mi-aplicacion"      # 👈 Debe coincidir con el de build
      manifests_path: "kubernetes"              # 👈 Ruta a tus manifiestos
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps]"
    secrets: inherit

  # ═══════════════════════════════════════════════════════════
  # 🔐 JOB 5: DESPLIEGUE GITOPS (PRE & PROD - MANUAL)
  # ═══════════════════════════════════════════════════════════
  deploy-manual:
    name: 🔐 Deploy to ${{ needs.determine-environment.outputs.environment }} (Requires Approval)
    needs: 
      - determine-environment
    if: |
      needs.determine-environment.outputs.should_deploy == 'true' && 
      (needs.determine-environment.outputs.environment == 'pre' || 
       needs.determine-environment.outputs.environment == 'prod')
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
    with:
      environment: ${{ needs.determine-environment.outputs.environment }}
      # 🎯 USAR EL TAG GENERADO POR EL BUILD
      image_tag: ${{ needs.build-docker-image.outputs.image_tag }}
      dockerhub_username: "tu-usuario"
      docker_image: "mi-aplicacion"
      manifests_path: "kubernetes"
      manifest_file_pattern: "*.yaml"
      commit_message_prefix: "[GitOps]"
      requires_approval: true
    secrets: inherit



  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 6: RESUMEN FINAL
  # ═══════════════════════════════════════════════════════════
  summary:
    name: 📊 Pipeline Summary
    needs:
      - determine-environment
      - show-build-output
      - deploy-auto
      - deploy-manual
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 CI/CD PIPELINE SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Event: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "🌍 Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "🚀 Should Deploy: ${{ needs.determine-environment.outputs.should_deploy }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "🐳 Docker Build:"
          echo "   • Status: ${{ needs.build-docker-image.result }}"
          echo "   • Image Tag: ${{ needs.build-docker-image.outputs.image_tag }}"
          echo "   • Full Image: ${{ needs.build-docker-image.outputs.full_image }}"
          echo ""
          echo "📋 Job Results:"
          echo "   • Determine Env: ${{ needs.determine-environment.result }}"
          echo "   • Build: ${{ needs.build-docker-image.result }}"
          echo "   • Show Output: ${{ needs.show-build-output.result }}"
          echo "   • Deploy Auto: ${{ needs.deploy-auto.result || 'skipped' }}"
          echo "   • Deploy Manual: ${{ needs.deploy-manual.result || 'skipped' }}"
          echo ""
          
          if [ "${{ needs.determine-environment.outputs.should_deploy }}" == "true" ]; then
            echo "✅ Deployment completed to: ${{ needs.determine-environment.outputs.environment }}"
            echo ""
            echo "🔄 Next Steps:"
            echo "   1. Check ArgoCD for sync status"
            echo "   2. Monitor application health"
            echo "   3. Verify deployment in target environment"
            echo ""
            echo "🎯 Deployed Image Tag:"
            echo "   ${{ needs.build-docker-image.outputs.image_tag }}"
          else
            echo "ℹ️  Image built but not deployed (PR or feature branch)"
            echo ""
            echo "🐳 Built Image:"
            echo "   ${{ needs.build-docker-image.outputs.full_image }}"
          fi
          
          echo ""
          echo "🔗 Workflow Run:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Check for Failures
        if: |
          needs.build-docker-image.result == 'failure' ||
          needs.deploy-auto.result == 'failure' ||
          needs.deploy-manual.result == 'failure'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ PIPELINE FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  One or more jobs failed. Please check the logs above."
          echo ""
          echo "🔍 Failed Jobs:"
          [ "${{ needs.build-docker-image.result }}" == "failure" ] && echo "   • Build Docker Image"
          [ "${{ needs.deploy-auto.result }}" == "failure" ] && echo "   • Deploy Auto"
          [ "${{ needs.deploy-manual.result }}" == "failure" ] && echo "   • Deploy Manual"
          echo ""
          echo "🔗 Workflow Run:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1

#           # .github/workflows/04-base_deployment_main.yml
# name: Deploy Updated Images

# on:
#   workflow_run:
#     workflows: ["Build and Push Docker Image"]
#     types:
#       - completed

# jobs:
#   deploy:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     runs-on: ubuntu-latest

#     steps:
#       - name: Download artifact from previous workflow
#         uses: actions/download-artifact@v4
#         with:
#           name: image-info
#           run-id: ${{ github.event.workflow_run.id }}
#           path: ./data

#       - name: Read image info
#         id: read
#         run: |
#           source ./data/image-info.env
#           echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
#           echo "tag_pre=${TAG_PRE}" >> $GITHUB_OUTPUT
#           echo "tag_staging=${TAG_STAGING}" >> $GITHUB_OUTPUT
#           echo "tag_prod=${TAG_PRO}" >> $GITHUB_OUTPUT

#       - name: Call GitOps reusable for staging
#         uses: dariasmoises979-blip/pipeline-build/.github/workflows/deployment-gitops.yml@main
#         with:
#           environment: staging
#           image_tag: ${{ steps.read.outputs.tag_staging }}
#           dockerhub_username: dariasmoises979
#           docker_image: ${{ steps.read.outputs.image_name }}
#         secrets: inherit
